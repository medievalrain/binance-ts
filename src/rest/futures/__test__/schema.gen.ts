// Generated by ts-to-zod
import { z } from "zod";

export const futuresTestConnectivitySchema = z.object({});

export const futuresCheckServerTimeSchema = z.object({
    serverTime: z.number()
});

export const futuresExchangeInfoRateLimitSchema = z.object({
    interval: z.union([z.literal("MINUTE"), z.literal("SECOND")]),
    intervalNum: z.number(),
    limit: z.number(),
    rateLimitType: z.union([z.literal("REQUEST_WEIGHT"), z.literal("ORDERS")])
});

export const futuresExchangeInfoAssetSchema = z.object({
    asset: z.string(),
    marginAvailable: z.boolean(),
    autoAssetExchange: z.string().nullable()
});

export const futuresExchangeInfoFilterSchema = z.union([z.object({
        filterType: z.literal("PRICE_FILTER"),
        minPrice: z.string(),
        tickSize: z.string(),
        maxPrice: z.string()
    }), z.object({
        filterType: z.literal("LOT_SIZE"),
        minQty: z.string(),
        stepSize: z.string(),
        maxQty: z.string()
    }), z.object({
        filterType: z.literal("MARKET_LOT_SIZE"),
        maxQty: z.string(),
        minQty: z.string(),
        stepSize: z.string()
    }), z.object({
        filterType: z.literal("MAX_NUM_ORDERS"),
        limit: z.number()
    }), z.object({
        filterType: z.literal("MAX_NUM_ALGO_ORDERS"),
        limit: z.number()
    }), z.object({
        filterType: z.literal("MIN_NOTIONAL"),
        notional: z.string()
    }), z.object({
        filterType: z.literal("PERCENT_PRICE"),
        multiplierUp: z.string(),
        multiplierDown: z.string(),
        multiplierDecimal: z.string()
    }), z.object({
        filterType: z.literal("POSITION_RISK_CONTROL"),
        positionControlSide: z.literal("NONE")
    })]);

export const futuresContractTypeSchema = z.union([z.literal("PERPETUAL"), z.literal("CURRENT_QUARTER"), z.literal("NEXT_QUARTER")]);

export const futuresUnderlyingTypeSchema = z.union([z.literal("COIN"), z.literal("INDEX"), z.literal("PREMARKET")]);

export const futuresOrderTypeSchema = z.union([z.literal("LIMIT"), z.literal("MARKET"), z.literal("STOP"), z.literal("TAKE_PROFIT"), z.literal("STOP_MARKET"), z.literal("TAKE_PROFIT_MARKET"), z.literal("TRAILING_STOP_MARKET")]);

export const permissionSetSchema = z.union([z.literal("COPY"), z.literal("GRID"), z.literal("DCA")]);

export const futuresExchangeInfoSymbolSchema = z.object({
    symbol: z.string(),
    pair: z.string(),
    contractType: futuresContractTypeSchema,
    deliveryDate: z.number(),
    onboardDate: z.number(),
    status: z.union([z.literal("TRADING"), z.literal("SETTLING"), z.literal("PENDING_TRADING")]),
    maintMarginPercent: z.string(),
    requiredMarginPercent: z.string(),
    baseAsset: z.string(),
    quoteAsset: z.string(),
    marginAsset: z.string(),
    pricePrecision: z.number(),
    quantityPrecision: z.number(),
    baseAssetPrecision: z.number(),
    quotePrecision: z.number(),
    underlyingType: futuresUnderlyingTypeSchema,
    underlyingSubType: z.array(z.string()),
    permissionSets: z.array(permissionSetSchema),
    settlePlan: z.number().optional(),
    triggerProtect: z.string(),
    filters: z.array(futuresExchangeInfoFilterSchema),
    OrderType: z.array(futuresOrderTypeSchema).optional(),
    timeInForce: z.array(z.string()),
    liquidationFee: z.string(),
    marketTakeBound: z.string()
});

export const futuresExchangeInfoSchema = z.object({
    exchangeFilters: z.array(z.unknown()),
    rateLimits: z.array(futuresExchangeInfoRateLimitSchema),
    serverTime: z.number(),
    assets: z.array(futuresExchangeInfoAssetSchema),
    symbols: z.array(futuresExchangeInfoSymbolSchema),
    timezone: z.string()
});

export const futuresOrderBookSchema = z.object({
    lastUpdateId: z.number(),
    E: z.number(),
    T: z.number(),
    bids: z.array(z.tuple([z.string(), z.string()])),
    asks: z.array(z.tuple([z.string(), z.string()]))
});

export const futuresTradeSchema = z.object({
    id: z.number(),
    price: z.string(),
    qty: z.string(),
    quoteQty: z.string(),
    time: z.number(),
    isBuyerMaker: z.boolean(),
    isRPITrade: z.boolean()
});

export const futuresAggregateTradeSchema = z.object({
    a: z.number(),
    p: z.string(),
    q: z.string(),
    f: z.number(),
    l: z.number(),
    T: z.number(),
    m: z.boolean()
});

export const futuresKlineIntervalSchema = z.union([z.literal("1s"), z.literal("1m"), z.literal("3m"), z.literal("5m"), z.literal("30m"), z.literal("1h"), z.literal("2h"), z.literal("6h"), z.literal("8h"), z.literal("12h"), z.literal("3d"), z.literal("1M")]);

export const futuresKlineSchema = z.tuple([z.number(), z.string(), z.string(), z.string(), z.string(), z.string(), z.number(), z.string(), z.number(), z.string(), z.string(), z.string()]);

export const futuresMarkPriceSchema = z.object({
    symbol: z.string(),
    markPrice: z.string(),
    indexPrice: z.string(),
    estimatedSettlePrice: z.string(),
    lastFundingRate: z.string(),
    interestRate: z.string(),
    nextFundingTime: z.number(),
    time: z.number()
});

export const futuresFundingRateSchema = z.object({
    symbol: z.string(),
    fundingRate: z.string(),
    fundingTime: z.number(),
    markPrice: z.string()
});

export const futuresFundingInfoSchema = z.object({
    adjustedFundingRateCap: z.string(),
    adjustedFundingRateFloor: z.string(),
    disclaimer: z.boolean(),
    fundingIntervalHours: z.number(),
    symbol: z.string(),
    updateTime: z.number().nullable()
});

export const futuresTicker24hSchema = z.object({
    closeTime: z.number(),
    count: z.number(),
    firstId: z.number(),
    highPrice: z.string(),
    lastId: z.number(),
    lastPrice: z.string(),
    lastQty: z.string(),
    lowPrice: z.string(),
    openPrice: z.string(),
    openTime: z.number(),
    priceChange: z.string(),
    priceChangePercent: z.string(),
    quoteVolume: z.string(),
    symbol: z.string(),
    volume: z.string(),
    weightedAvgPrice: z.string()
});

export const futuresSymbolPriceSchema = z.object({
    symbol: z.string(),
    price: z.string(),
    time: z.number()
});

export const futuresBookTickerSchema = z.object({
    symbol: z.string(),
    bidPrice: z.string(),
    bidQty: z.string(),
    askPrice: z.string(),
    askQty: z.string(),
    time: z.number(),
    lastUpdateId: z.number()
});

export const futuresDeliveryPriceSchema = z.object({
    deliveryTime: z.number(),
    deliveryPrice: z.number()
});

export const futuresOpenInterestSchema = z.object({
    openInterest: z.string(),
    symbol: z.string(),
    time: z.number()
});

export const futuresOpenInterestStatsSchema = z.object({
    symbol: z.string(),
    CMCCirculatingSupply: z.string(),
    sumOpenInterest: z.string(),
    sumOpenInterestValue: z.string(),
    timestamp: z.number()
});

export const futuresLongShortRatioSchema = z.object({
    symbol: z.string(),
    longShortRatio: z.string(),
    longAccount: z.string(),
    shortAccount: z.string(),
    timestamp: z.number()
});

export const futuresOpenInterestPeriodSchema = z.union([z.literal("5m"), z.literal("15m"), z.literal("30m"), z.literal("1h"), z.literal("2h"), z.literal("4h"), z.literal("6h"), z.literal("12h"), z.literal("1d")]);

export const futuresTakerBuySellRatioSchema = z.object({
    buySellRatio: z.string(),
    buyVol: z.string(),
    sellVol: z.string(),
    timestamp: z.number()
});

export const futuresBasisSchema = z.object({
    indexPrice: z.string(),
    contractType: futuresContractTypeSchema,
    basisRate: z.string(),
    futuresPrice: z.string(),
    annualizedBasisRate: z.string(),
    basis: z.string(),
    pair: z.string(),
    timestamp: z.number()
});

export const futuresCompositeIndexAssetSchema = z.object({
    baseAsset: z.string(),
    quoteAsset: z.string(),
    weightInQuantity: z.string(),
    weightInPercentage: z.string()
});

export const futuresCompositeIndexSchema = z.object({
    symbol: z.string(),
    time: z.number(),
    component: z.string(),
    baseAssetList: z.array(futuresCompositeIndexAssetSchema)
});

export const futuresAssetIndexSchema = z.object({
    askBuffer: z.string(),
    askRate: z.string(),
    autoExchangeAskBuffer: z.string(),
    autoExchangeAskRate: z.string(),
    autoExchangeBidBuffer: z.string(),
    autoExchangeBidRate: z.string(),
    bidBuffer: z.string(),
    bidRate: z.string(),
    index: z.string(),
    symbol: z.string(),
    time: z.number()
});

export const futuresIndexPriceConstituentItemSchema = z.object({
    exchange: z.string(),
    symbol: z.string(),
    price: z.string(),
    weight: z.string()
});

export const futuresIndexPriceConstituentsSchema = z.object({
    symbol: z.string(),
    time: z.number(),
    constituents: z.array(futuresIndexPriceConstituentItemSchema)
});

export const futuresInsuranceBalanceAssetSchema = z.object({
    asset: z.string(),
    marginBalance: z.string(),
    updateTime: z.number()
});

export const futuresInsuranceBalanceSchema = z.object({
    symbols: z.array(z.string()),
    assets: z.array(futuresInsuranceBalanceAssetSchema)
});

export const futuresAccountBalanceSchema = z.object({
    accountAlias: z.string(),
    asset: z.string(),
    balance: z.string(),
    crossWalletBalance: z.string(),
    crossUnPnl: z.string(),
    availableBalance: z.string(),
    maxWithdrawAmount: z.string(),
    marginAvailable: z.boolean(),
    updateTime: z.number()
});

export const futuresAccountAssetSchema = z.object({
    asset: z.string(),
    walletBalance: z.string(),
    unrealizedProfit: z.string(),
    marginBalance: z.string(),
    maintMargin: z.string(),
    initialMargin: z.string(),
    positionInitialMargin: z.string(),
    openOrderInitialMargin: z.string(),
    crossWalletBalance: z.string(),
    crossUnPnl: z.string(),
    availableBalance: z.string(),
    maxWithdrawAmount: z.string(),
    updateTime: z.number(),
    marginAvailable: z.boolean().optional()
});

export const futuresAccountPositionSchema = z.object({
    symbol: z.string(),
    positionSide: z.string(),
    positionAmt: z.string(),
    unrealizedProfit: z.string(),
    isolatedMargin: z.string(),
    notional: z.string(),
    isolatedWallet: z.string(),
    initialMargin: z.string(),
    maintMargin: z.string(),
    updateTime: z.number()
});

export const futuresAccountInfoSchema = z.object({
    totalInitialMargin: z.string(),
    totalMaintMargin: z.string(),
    totalWalletBalance: z.string(),
    totalUnrealizedProfit: z.string(),
    totalMarginBalance: z.string(),
    totalPositionInitialMargin: z.string(),
    totalOpenOrderInitialMargin: z.string(),
    totalCrossWalletBalance: z.string(),
    totalCrossUnPnl: z.string(),
    availableBalance: z.string(),
    maxWithdrawAmount: z.string(),
    assets: z.array(futuresAccountAssetSchema),
    positions: z.array(futuresAccountPositionSchema)
});

export const futuresCommissionRateSchema = z.object({
    symbol: z.string(),
    makerCommissionRate: z.string(),
    takerCommissionRate: z.string()
});

export const futuresAccountConfigSchema = z.object({
    feeTier: z.number(),
    canTrade: z.boolean(),
    canDeposit: z.boolean(),
    canWithdraw: z.boolean(),
    dualSidePosition: z.boolean(),
    multiAssetsMargin: z.boolean(),
    tradeGroupId: z.number()
});

export const futuresSymbolConfigSchema = z.object({
    symbol: z.string(),
    marginType: z.union([z.literal("ISOLATED"), z.literal("CROSSED")]),
    isAutoAddMargin: z.boolean(),
    leverage: z.number(),
    maxNotionalValue: z.union([z.string(), z.literal("INF")])
});

export const futuresUserRateLimitSchema = z.object({
    rateLimitType: z.literal("ORDERS"),
    interval: z.union([z.literal("SECOND"), z.literal("MINUTE"), z.literal("DAY")]),
    intervalNum: z.number(),
    limit: z.number()
});

export const futuresLeverageBracketEntrySchema = z.object({
    bracket: z.number(),
    initialLeverage: z.number(),
    notionalCap: z.number(),
    notionalFloor: z.number(),
    maintMarginRatio: z.number(),
    cum: z.number()
});

export const futuresLeverageBracketSchema = z.object({
    symbol: z.string(),
    notionalCoef: z.number().optional(),
    brackets: z.array(futuresLeverageBracketEntrySchema)
});

export const futuresPositionModeSchema = z.object({
    dualSidePosition: z.boolean()
});

export const futuresIncomeTypeSchema = z.union([z.literal("TRANSFER"), z.literal("WELCOME_BONUS"), z.literal("REALIZED_PNL"), z.literal("FUNDING_FEE"), z.literal("COMMISSION"), z.literal("INSURANCE_CLEAR"), z.literal("REFERRAL_KICKBACK"), z.literal("COMMISSION_REBATE"), z.literal("API_REBATE"), z.literal("CONTEST_REWARD"), z.literal("CROSS_COLLATERAL_TRANSFER"), z.literal("OPTIONS_PREMIUM_FEE"), z.literal("OPTIONS_SETTLE_PROFIT"), z.literal("INTERNAL_TRANSFER"), z.literal("AUTO_EXCHANGE"), z.literal("DELIVERED_SETTELMENT"), z.literal("COIN_SWAP_DEPOSIT"), z.literal("COIN_SWAP_WITHDRAW"), z.literal("POSITION_LIMIT_INCREASE_FEE"), z.literal("STRATEGY_UMFUTURES_TRANSFER"), z.literal("FEE_RETURN"), z.literal("BFUSD_REWARD")]);

export const futuresIncomeHistorySchema = z.object({
    symbol: z.string().optional(),
    incomeType: futuresIncomeTypeSchema,
    income: z.string(),
    asset: z.string(),
    info: z.string(),
    time: z.number(),
    tranId: z.number(),
    tradeId: z.string()
});

export const futuresOrderSideSchema = z.union([z.literal("BUY"), z.literal("SELL")]);

export const futuresPositionSideSchema = z.union([z.literal("BOTH"), z.literal("LONG"), z.literal("SHORT")]);

export const futuresTimeInForceSchema = z.union([z.literal("GTC"), z.literal("IOC"), z.literal("FOK"), z.literal("GTX"), z.literal("GTD")]);

export const futuresWorkingTypeSchema = z.union([z.literal("MARK_PRICE"), z.literal("CONTRACT_PRICE")]);

export const futuresNewOrderRespTypeSchema = z.union([z.literal("ACK"), z.literal("RESULT")]);

export const futuresPriceMatchSchema = z.union([z.literal("OPPONENT"), z.literal("OPPONENT_5"), z.literal("OPPONENT_10"), z.literal("OPPONENT_20"), z.literal("QUEUE"), z.literal("QUEUE_5"), z.literal("QUEUE_10"), z.literal("QUEUE_20"), z.literal("NONE")]);

export const futuresSelfTradePreventionSchema = z.union([z.literal("NONE"), z.literal("EXPIRE_TAKER"), z.literal("EXPIRE_MAKER"), z.literal("EXPIRE_BOTH")]);

export const futuresNewOrderSchema = z.object({
    clientOrderId: z.string(),
    cumQty: z.string(),
    cumQuote: z.string(),
    executedQty: z.string(),
    orderId: z.string(),
    avgPrice: z.string(),
    origQty: z.string(),
    price: z.string(),
    reduceOnly: z.boolean(),
    side: futuresOrderSideSchema,
    positionSide: futuresPositionSideSchema,
    status: z.string(),
    stopPrice: z.string().optional(),
    closePosition: z.boolean().optional(),
    symbol: z.string(),
    timeInForce: futuresTimeInForceSchema,
    type: futuresOrderTypeSchema,
    origType: futuresOrderTypeSchema,
    activatePrice: z.string().optional(),
    priceRate: z.string().optional(),
    updateTime: z.string(),
    workingType: futuresWorkingTypeSchema,
    priceProtect: z.boolean(),
    priceMatch: futuresPriceMatchSchema.optional(),
    selfTradePreventionMode: futuresSelfTradePreventionSchema.optional(),
    goodTillDate: z.string().optional()
});

export const futuresGetListenKeySchema = z.object({
    listenKey: z.string()
});
